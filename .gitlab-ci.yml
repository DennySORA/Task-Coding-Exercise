include:
- template: Security/SAST.gitlab-ci.yml

sast:
  stage: test

stages:
  - test
  - build
  - release

################################
## docker services references ##
################################

.docker_services:
  image: amazon/aws-cli:latest
  stage: build
  services:
    - docker:stable-dind
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - amazon-linux-extras install docker
    - aws configure list
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - if [ -n "$CI_COMMIT_TAG" ]; then
      IMAGE_TAG=$CI_COMMIT_TAG;
      IMAGE_VERSION=$CI_COMMIT_TAG;
      else
      IMAGE_TAG="$PACKAGE_TAG";
      IMAGE_VERSION=$CI_COMMIT_SHORT_SHA;
      fi
    - export DOCKER_TAG=${DOCKER_IMAGE}:${IMAGE_TAG}
    - export DOCKER_HASH_TAG=${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA};
  script:
    - docker build -t ${DOCKER_TAG} --build-arg OUTSIDE_VERSION=${IMAGE_VERSION} --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN} .
    - docker tag ${DOCKER_TAG} ${DOCKER_HASH_TAG}
    - docker push ${DOCKER_HASH_TAG}
    - docker push ${DOCKER_TAG}
  tags: []
  interruptible: true
  allow_failure: true

##############################
## docker config references ##
##############################

.docker_env_common:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: "1"

.docker_repository: &docker_repository
  extends: .docker_env_common
  DOCKER_REGISTRY: ""
  DOCKER_REPOSITORY: ""
  DOCKER_IMAGE: "$DOCKER_REGISTRY/$DOCKER_REPOSITORY"


#######################
##   test and lint   ##
#######################

pylint-test:
  stage: test
  image: python:3.10-alpine3.14
  before_script:
    - pip install -U pylint pylint-exit anybadge
    - pip install -q -r ./app/requirements.txt
  script:
    - mkdir ./pylint
    - pylint --output-format=text ./app | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=Pylint --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - ./pylint/
  tags: []
  interruptible: true
  allow_failure: true

pytest-test:
  stage: test
  image: python:3.10-alpine3.14
  before_script:
    - pip install -U pytest pytest-cov
    - pip install -q -r ./app/requirements.txt
    - export PYTHONPATH=$PYTHONPATH:./app
  script:
    - pytest -v --cov=./app -W ignore::DeprecationWarning
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml
  tags: []
  interruptible: true
  allow_failure: true

#######################
## docker repository ##
#######################

docker_test_package:
  variables:
    <<: *docker_repository
    PACKAGE_TAG: "test"
  extends:
    - .docker_services
  only:
    - /^test\/.*/
    - /^feature\/.*/
  when: manual

docker_develop_package:
  variables:
    <<: *docker_repository
    PACKAGE_TAG: "develop"
  extends:
    - .docker_services
  only:
    - /^feature\/.*/
    - develop
  when: manual

docker_latest_package:
  variables:
    <<: *docker_repository
    PACKAGE_TAG: "latest"
  extends:
    - .docker_services
  only:
    - develop
    - master
    - tag
  when: manual

docker_prod_package:
  variables:
    <<: *docker_repository
  extends:
    - .docker_services
  only:
    - tag

semantic_release:
  image: node:16.9-buster-slim
  stage: release
  variables:
    GL_TOKEN: "${GL_TOKEN}"
    SEMANTIC_RELEASE_PACKAGE: "${CI_PROJECT_NAME}"
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core
    - apt-get install apt-transport-https ca-certificates -y
    - update-ca-certificates
    - npm i -g semantic-release @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/gitlab@6.0.0 @semantic-release/git @semantic-release/release-notes-generator conventional-changelog-conventionalcommits
  script:
    - semantic-release
  only:
    - main
    - master
  except:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TITLE =~ /^RELEASE:.+$/
  tags: []
  interruptible: true
  allow_failure: false